clear   // очистка рабочего пространства

K = 4;    // количество классов
N = 2;    // количество точек в классе
S = 2;    // число нейронов в слое

// входные значения
P=[2 1 -2 0 1 2 -1 -2;
   1 2 -2 -1 -2 -1 0 1];

// желаемые выходные значения     
T=[0 0 0 0 1 1 1 1;
   1 1 0 0 0 0 1 1];
  
// вызов функции обучения
[w,b] = ann_PERCEPTRON(P,T);

// построение диаграммы расположения входных точек
clf;
j = -3;         // код отображаемого символа
for i = 1:K*N   // цикл для всех точек данных из P
    plot2d(P(1,i), P(2,i), j);
    if modulo(i,2) == 0
        j = j-1; // изменение символа отображения
    end
end
xgrid;
xtitle("Границы решений", "p1", "p2");
mtlb_hold('on') // запрет очистки граф. окна

// отображение на графике границ решений 
p1 = min(P) - 0.1:0.1:max(P) + 0.1;
len = length(p1);
p2 = zeros(S, len);
for i = 1:S
    p2(i,:) = -w(i,1) / w(i,2) .* p1 - b(i) ./ w(i,2);  // уравнение прямой
    plot(p1, p2(i,:));
end  

// тестирование персептрона
a = ann_PERCEPTRON_run(P,w,b)   // на входных данных
disp(a)

// дополнительные точки входных классов
P=[1.1 1.7 0 -2.5 1.3 2.5 -1.5 -2.3;
   1.9 2.2 -1.3 -1.5 -2.1 -1.1 0.3 0.7];

a = ann_PERCEPTRON_run(P,w,b)   // для доп. точек
disp(a)
   
     

